// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComplexObjectResponse complex object response
//
// swagger:model ComplexObjectResponse
type ComplexObjectResponse struct {

	// object1
	// Required: true
	Object1 *SimpleObjectOne `json:"object1"`

	// object2
	// Required: true
	Object2 *SimpleObjectTwo `json:"object2"`

	// optional param
	OptionalParam int64 `json:"optional_param,omitempty"`
}

// Validate validates this complex object response
func (m *ComplexObjectResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObject1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObject2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplexObjectResponse) validateObject1(formats strfmt.Registry) error {

	if err := validate.Required("object1", "body", m.Object1); err != nil {
		return err
	}

	if m.Object1 != nil {
		if err := m.Object1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object1")
			}
			return err
		}
	}

	return nil
}

func (m *ComplexObjectResponse) validateObject2(formats strfmt.Registry) error {

	if err := validate.Required("object2", "body", m.Object2); err != nil {
		return err
	}

	if m.Object2 != nil {
		if err := m.Object2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("object2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplexObjectResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplexObjectResponse) UnmarshalBinary(b []byte) error {
	var res ComplexObjectResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
