// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNoParamsSimpleResponseHandlerFunc turns a function with the right signature into a get no params simple response handler
type GetNoParamsSimpleResponseHandlerFunc func(GetNoParamsSimpleResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNoParamsSimpleResponseHandlerFunc) Handle(params GetNoParamsSimpleResponseParams) middleware.Responder {
	return fn(params)
}

// GetNoParamsSimpleResponseHandler interface for that can handle valid get no params simple response params
type GetNoParamsSimpleResponseHandler interface {
	Handle(GetNoParamsSimpleResponseParams) middleware.Responder
}

// NewGetNoParamsSimpleResponse creates a new http.Handler for the get no params simple response operation
func NewGetNoParamsSimpleResponse(ctx *middleware.Context, handler GetNoParamsSimpleResponseHandler) *GetNoParamsSimpleResponse {
	return &GetNoParamsSimpleResponse{Context: ctx, Handler: handler}
}

/*GetNoParamsSimpleResponse swagger:route GET /no-params/simple-response open getNoParamsSimpleResponse

An endpoint which returns a HTTP response code and a JSON encoded message in a body

An endpoint which returns a HTTP response code and a JSON encoded message in a body

*/
type GetNoParamsSimpleResponse struct {
	Context *middleware.Context
	Handler GetNoParamsSimpleResponseHandler
}

func (o *GetNoParamsSimpleResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNoParamsSimpleResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
