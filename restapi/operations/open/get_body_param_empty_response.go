// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBodyParamEmptyResponseHandlerFunc turns a function with the right signature into a get body param empty response handler
type GetBodyParamEmptyResponseHandlerFunc func(GetBodyParamEmptyResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBodyParamEmptyResponseHandlerFunc) Handle(params GetBodyParamEmptyResponseParams) middleware.Responder {
	return fn(params)
}

// GetBodyParamEmptyResponseHandler interface for that can handle valid get body param empty response params
type GetBodyParamEmptyResponseHandler interface {
	Handle(GetBodyParamEmptyResponseParams) middleware.Responder
}

// NewGetBodyParamEmptyResponse creates a new http.Handler for the get body param empty response operation
func NewGetBodyParamEmptyResponse(ctx *middleware.Context, handler GetBodyParamEmptyResponseHandler) *GetBodyParamEmptyResponse {
	return &GetBodyParamEmptyResponse{Context: ctx, Handler: handler}
}

/*GetBodyParamEmptyResponse swagger:route GET /body-param/empty-response open getBodyParamEmptyResponse

Get endpoint defined which simply gives response indicating that POST should be used

Get endpoint defined which simply gives response indicating that POST should be used

*/
type GetBodyParamEmptyResponse struct {
	Context *middleware.Context
	Handler GetBodyParamEmptyResponseHandler
}

func (o *GetBodyParamEmptyResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBodyParamEmptyResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
