// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostBodyParamErrorResponseHandlerFunc turns a function with the right signature into a post body param error response handler
type PostBodyParamErrorResponseHandlerFunc func(PostBodyParamErrorResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBodyParamErrorResponseHandlerFunc) Handle(params PostBodyParamErrorResponseParams) middleware.Responder {
	return fn(params)
}

// PostBodyParamErrorResponseHandler interface for that can handle valid post body param error response params
type PostBodyParamErrorResponseHandler interface {
	Handle(PostBodyParamErrorResponseParams) middleware.Responder
}

// NewPostBodyParamErrorResponse creates a new http.Handler for the post body param error response operation
func NewPostBodyParamErrorResponse(ctx *middleware.Context, handler PostBodyParamErrorResponseHandler) *PostBodyParamErrorResponse {
	return &PostBodyParamErrorResponse{Context: ctx, Handler: handler}
}

/*PostBodyParamErrorResponse swagger:route POST /body-param/error-response open postBodyParamErrorResponse

An endpoint which takes an input parameter and returns a HTTP response code and an error response

An endpoint which takes an input parameter and returns a HTTP response code and an error response

*/
type PostBodyParamErrorResponse struct {
	Context *middleware.Context
	Handler PostBodyParamErrorResponseHandler
}

func (o *PostBodyParamErrorResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBodyParamErrorResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
