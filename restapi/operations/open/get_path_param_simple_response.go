// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPathParamSimpleResponseHandlerFunc turns a function with the right signature into a get path param simple response handler
type GetPathParamSimpleResponseHandlerFunc func(GetPathParamSimpleResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPathParamSimpleResponseHandlerFunc) Handle(params GetPathParamSimpleResponseParams) middleware.Responder {
	return fn(params)
}

// GetPathParamSimpleResponseHandler interface for that can handle valid get path param simple response params
type GetPathParamSimpleResponseHandler interface {
	Handle(GetPathParamSimpleResponseParams) middleware.Responder
}

// NewGetPathParamSimpleResponse creates a new http.Handler for the get path param simple response operation
func NewGetPathParamSimpleResponse(ctx *middleware.Context, handler GetPathParamSimpleResponseHandler) *GetPathParamSimpleResponse {
	return &GetPathParamSimpleResponse{Context: ctx, Handler: handler}
}

/*GetPathParamSimpleResponse swagger:route GET /path-param/simple-response/{param} open getPathParamSimpleResponse

Endpoint which takes a parameter and returns a HTTP response containing a simple message

Endpoint which takes a parameter and returns a HTTP response containing a simple message

*/
type GetPathParamSimpleResponse struct {
	Context *middleware.Context
	Handler GetPathParamSimpleResponseHandler
}

func (o *GetPathParamSimpleResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPathParamSimpleResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
