// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostBodyParamEmptyResponseHandlerFunc turns a function with the right signature into a post body param empty response handler
type PostBodyParamEmptyResponseHandlerFunc func(PostBodyParamEmptyResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBodyParamEmptyResponseHandlerFunc) Handle(params PostBodyParamEmptyResponseParams) middleware.Responder {
	return fn(params)
}

// PostBodyParamEmptyResponseHandler interface for that can handle valid post body param empty response params
type PostBodyParamEmptyResponseHandler interface {
	Handle(PostBodyParamEmptyResponseParams) middleware.Responder
}

// NewPostBodyParamEmptyResponse creates a new http.Handler for the post body param empty response operation
func NewPostBodyParamEmptyResponse(ctx *middleware.Context, handler PostBodyParamEmptyResponseHandler) *PostBodyParamEmptyResponse {
	return &PostBodyParamEmptyResponse{Context: ctx, Handler: handler}
}

/*PostBodyParamEmptyResponse swagger:route POST /body-param/empty-response open postBodyParamEmptyResponse

Endpoint which takes a body parameter and returns a HTTP response code only

Endpoint which takes a body parameter and returns a HTTP response code only

*/
type PostBodyParamEmptyResponse struct {
	Context *middleware.Context
	Handler PostBodyParamEmptyResponseHandler
}

func (o *PostBodyParamEmptyResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBodyParamEmptyResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
