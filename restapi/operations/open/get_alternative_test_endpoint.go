// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAlternativeTestEndpointHandlerFunc turns a function with the right signature into a get alternative test endpoint handler
type GetAlternativeTestEndpointHandlerFunc func(GetAlternativeTestEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAlternativeTestEndpointHandlerFunc) Handle(params GetAlternativeTestEndpointParams) middleware.Responder {
	return fn(params)
}

// GetAlternativeTestEndpointHandler interface for that can handle valid get alternative test endpoint params
type GetAlternativeTestEndpointHandler interface {
	Handle(GetAlternativeTestEndpointParams) middleware.Responder
}

// NewGetAlternativeTestEndpoint creates a new http.Handler for the get alternative test endpoint operation
func NewGetAlternativeTestEndpoint(ctx *middleware.Context, handler GetAlternativeTestEndpointHandler) *GetAlternativeTestEndpoint {
	return &GetAlternativeTestEndpoint{Context: ctx, Handler: handler}
}

/*GetAlternativeTestEndpoint swagger:route GET /test/alternative open getAlternativeTestEndpoint

Gets test endpoint

An alternative endpoint for testing

*/
type GetAlternativeTestEndpoint struct {
	Context *middleware.Context
	Handler GetAlternativeTestEndpointHandler
}

func (o *GetAlternativeTestEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAlternativeTestEndpointParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
