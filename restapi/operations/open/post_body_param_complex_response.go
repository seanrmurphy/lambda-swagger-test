// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostBodyParamComplexResponseHandlerFunc turns a function with the right signature into a post body param complex response handler
type PostBodyParamComplexResponseHandlerFunc func(PostBodyParamComplexResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBodyParamComplexResponseHandlerFunc) Handle(params PostBodyParamComplexResponseParams) middleware.Responder {
	return fn(params)
}

// PostBodyParamComplexResponseHandler interface for that can handle valid post body param complex response params
type PostBodyParamComplexResponseHandler interface {
	Handle(PostBodyParamComplexResponseParams) middleware.Responder
}

// NewPostBodyParamComplexResponse creates a new http.Handler for the post body param complex response operation
func NewPostBodyParamComplexResponse(ctx *middleware.Context, handler PostBodyParamComplexResponseHandler) *PostBodyParamComplexResponse {
	return &PostBodyParamComplexResponse{Context: ctx, Handler: handler}
}

/*PostBodyParamComplexResponse swagger:route POST /body-param/complex-response open postBodyParamComplexResponse

An endpoint which takes an input parameters and returns a HTTP response code and a complex JSON object in a body

An endpoint which takes an input parameter and returns a HTTP response code and a complex JSON object in a body

*/
type PostBodyParamComplexResponse struct {
	Context *middleware.Context
	Handler PostBodyParamComplexResponseHandler
}

func (o *PostBodyParamComplexResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBodyParamComplexResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
