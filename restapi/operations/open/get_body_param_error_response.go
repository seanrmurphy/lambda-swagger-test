// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBodyParamErrorResponseHandlerFunc turns a function with the right signature into a get body param error response handler
type GetBodyParamErrorResponseHandlerFunc func(GetBodyParamErrorResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBodyParamErrorResponseHandlerFunc) Handle(params GetBodyParamErrorResponseParams) middleware.Responder {
	return fn(params)
}

// GetBodyParamErrorResponseHandler interface for that can handle valid get body param error response params
type GetBodyParamErrorResponseHandler interface {
	Handle(GetBodyParamErrorResponseParams) middleware.Responder
}

// NewGetBodyParamErrorResponse creates a new http.Handler for the get body param error response operation
func NewGetBodyParamErrorResponse(ctx *middleware.Context, handler GetBodyParamErrorResponseHandler) *GetBodyParamErrorResponse {
	return &GetBodyParamErrorResponse{Context: ctx, Handler: handler}
}

/*GetBodyParamErrorResponse swagger:route GET /body-param/error-response open getBodyParamErrorResponse

Get endpoint defined which simply gives response indicating that POST should be used

Get endpoint defined which simply gives response indicating that POST should be used

*/
type GetBodyParamErrorResponse struct {
	Context *middleware.Context
	Handler GetBodyParamErrorResponseHandler
}

func (o *GetBodyParamErrorResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBodyParamErrorResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
