// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostBodyParamSimpleResponseHandlerFunc turns a function with the right signature into a post body param simple response handler
type PostBodyParamSimpleResponseHandlerFunc func(PostBodyParamSimpleResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBodyParamSimpleResponseHandlerFunc) Handle(params PostBodyParamSimpleResponseParams) middleware.Responder {
	return fn(params)
}

// PostBodyParamSimpleResponseHandler interface for that can handle valid post body param simple response params
type PostBodyParamSimpleResponseHandler interface {
	Handle(PostBodyParamSimpleResponseParams) middleware.Responder
}

// NewPostBodyParamSimpleResponse creates a new http.Handler for the post body param simple response operation
func NewPostBodyParamSimpleResponse(ctx *middleware.Context, handler PostBodyParamSimpleResponseHandler) *PostBodyParamSimpleResponse {
	return &PostBodyParamSimpleResponse{Context: ctx, Handler: handler}
}

/*PostBodyParamSimpleResponse swagger:route POST /body-param/simple-response open postBodyParamSimpleResponse

Endpoint which takes a body parameter and returns a HTTP response containing a simple message

Endpoint which takes a body parameter and returns a HTTP response containing a simple message

*/
type PostBodyParamSimpleResponse struct {
	Context *middleware.Context
	Handler PostBodyParamSimpleResponseHandler
}

func (o *PostBodyParamSimpleResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBodyParamSimpleResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
