// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/seanrmurphy/lambda-swagger-test/restapi/operations/open"
)

// NewLambdaGoSwaggerTestAPIAPI creates a new LambdaGoSwaggerTestAPI instance
func NewLambdaGoSwaggerTestAPIAPI(spec *loads.Document) *LambdaGoSwaggerTestAPIAPI {
	return &LambdaGoSwaggerTestAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		OpenGetAPIIdentifierHandler: open.GetAPIIdentifierHandlerFunc(func(params open.GetAPIIdentifierParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetAPIIdentifier has not yet been implemented")
		}),
		OpenGetBodyParamComplexResponseHandler: open.GetBodyParamComplexResponseHandlerFunc(func(params open.GetBodyParamComplexResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetBodyParamComplexResponse has not yet been implemented")
		}),
		OpenGetBodyParamEmptyResponseHandler: open.GetBodyParamEmptyResponseHandlerFunc(func(params open.GetBodyParamEmptyResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetBodyParamEmptyResponse has not yet been implemented")
		}),
		OpenGetBodyParamErrorResponseHandler: open.GetBodyParamErrorResponseHandlerFunc(func(params open.GetBodyParamErrorResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetBodyParamErrorResponse has not yet been implemented")
		}),
		OpenGetBodyParamSimpleResponseHandler: open.GetBodyParamSimpleResponseHandlerFunc(func(params open.GetBodyParamSimpleResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetBodyParamSimpleResponse has not yet been implemented")
		}),
		OpenGetNoParamsComplexResponseHandler: open.GetNoParamsComplexResponseHandlerFunc(func(params open.GetNoParamsComplexResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetNoParamsComplexResponse has not yet been implemented")
		}),
		OpenGetNoParamsEmptyResponseHandler: open.GetNoParamsEmptyResponseHandlerFunc(func(params open.GetNoParamsEmptyResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetNoParamsEmptyResponse has not yet been implemented")
		}),
		OpenGetNoParamsErrorResponseHandler: open.GetNoParamsErrorResponseHandlerFunc(func(params open.GetNoParamsErrorResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetNoParamsErrorResponse has not yet been implemented")
		}),
		OpenGetNoParamsSimpleResponseHandler: open.GetNoParamsSimpleResponseHandlerFunc(func(params open.GetNoParamsSimpleResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetNoParamsSimpleResponse has not yet been implemented")
		}),
		OpenGetPathParamComplexResponseHandler: open.GetPathParamComplexResponseHandlerFunc(func(params open.GetPathParamComplexResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetPathParamComplexResponse has not yet been implemented")
		}),
		OpenGetPathParamEmptyResponseHandler: open.GetPathParamEmptyResponseHandlerFunc(func(params open.GetPathParamEmptyResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetPathParamEmptyResponse has not yet been implemented")
		}),
		OpenGetPathParamErrorResponseHandler: open.GetPathParamErrorResponseHandlerFunc(func(params open.GetPathParamErrorResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetPathParamErrorResponse has not yet been implemented")
		}),
		OpenGetPathParamSimpleResponseHandler: open.GetPathParamSimpleResponseHandlerFunc(func(params open.GetPathParamSimpleResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.GetPathParamSimpleResponse has not yet been implemented")
		}),
		OpenPostBodyParamComplexResponseHandler: open.PostBodyParamComplexResponseHandlerFunc(func(params open.PostBodyParamComplexResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.PostBodyParamComplexResponse has not yet been implemented")
		}),
		OpenPostBodyParamEmptyResponseHandler: open.PostBodyParamEmptyResponseHandlerFunc(func(params open.PostBodyParamEmptyResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.PostBodyParamEmptyResponse has not yet been implemented")
		}),
		OpenPostBodyParamErrorResponseHandler: open.PostBodyParamErrorResponseHandlerFunc(func(params open.PostBodyParamErrorResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.PostBodyParamErrorResponse has not yet been implemented")
		}),
		OpenPostBodyParamSimpleResponseHandler: open.PostBodyParamSimpleResponseHandlerFunc(func(params open.PostBodyParamSimpleResponseParams) middleware.Responder {
			return middleware.NotImplemented("operation open.PostBodyParamSimpleResponse has not yet been implemented")
		}),
	}
}

/*LambdaGoSwaggerTestAPIAPI A Test API for testing lambda/go-swagger integration */
type LambdaGoSwaggerTestAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OpenGetAPIIdentifierHandler sets the operation handler for the get Api identifier operation
	OpenGetAPIIdentifierHandler open.GetAPIIdentifierHandler
	// OpenGetBodyParamComplexResponseHandler sets the operation handler for the get body param complex response operation
	OpenGetBodyParamComplexResponseHandler open.GetBodyParamComplexResponseHandler
	// OpenGetBodyParamEmptyResponseHandler sets the operation handler for the get body param empty response operation
	OpenGetBodyParamEmptyResponseHandler open.GetBodyParamEmptyResponseHandler
	// OpenGetBodyParamErrorResponseHandler sets the operation handler for the get body param error response operation
	OpenGetBodyParamErrorResponseHandler open.GetBodyParamErrorResponseHandler
	// OpenGetBodyParamSimpleResponseHandler sets the operation handler for the get body param simple response operation
	OpenGetBodyParamSimpleResponseHandler open.GetBodyParamSimpleResponseHandler
	// OpenGetNoParamsComplexResponseHandler sets the operation handler for the get no params complex response operation
	OpenGetNoParamsComplexResponseHandler open.GetNoParamsComplexResponseHandler
	// OpenGetNoParamsEmptyResponseHandler sets the operation handler for the get no params empty response operation
	OpenGetNoParamsEmptyResponseHandler open.GetNoParamsEmptyResponseHandler
	// OpenGetNoParamsErrorResponseHandler sets the operation handler for the get no params error response operation
	OpenGetNoParamsErrorResponseHandler open.GetNoParamsErrorResponseHandler
	// OpenGetNoParamsSimpleResponseHandler sets the operation handler for the get no params simple response operation
	OpenGetNoParamsSimpleResponseHandler open.GetNoParamsSimpleResponseHandler
	// OpenGetPathParamComplexResponseHandler sets the operation handler for the get path param complex response operation
	OpenGetPathParamComplexResponseHandler open.GetPathParamComplexResponseHandler
	// OpenGetPathParamEmptyResponseHandler sets the operation handler for the get path param empty response operation
	OpenGetPathParamEmptyResponseHandler open.GetPathParamEmptyResponseHandler
	// OpenGetPathParamErrorResponseHandler sets the operation handler for the get path param error response operation
	OpenGetPathParamErrorResponseHandler open.GetPathParamErrorResponseHandler
	// OpenGetPathParamSimpleResponseHandler sets the operation handler for the get path param simple response operation
	OpenGetPathParamSimpleResponseHandler open.GetPathParamSimpleResponseHandler
	// OpenPostBodyParamComplexResponseHandler sets the operation handler for the post body param complex response operation
	OpenPostBodyParamComplexResponseHandler open.PostBodyParamComplexResponseHandler
	// OpenPostBodyParamEmptyResponseHandler sets the operation handler for the post body param empty response operation
	OpenPostBodyParamEmptyResponseHandler open.PostBodyParamEmptyResponseHandler
	// OpenPostBodyParamErrorResponseHandler sets the operation handler for the post body param error response operation
	OpenPostBodyParamErrorResponseHandler open.PostBodyParamErrorResponseHandler
	// OpenPostBodyParamSimpleResponseHandler sets the operation handler for the post body param simple response operation
	OpenPostBodyParamSimpleResponseHandler open.PostBodyParamSimpleResponseHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *LambdaGoSwaggerTestAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *LambdaGoSwaggerTestAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *LambdaGoSwaggerTestAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *LambdaGoSwaggerTestAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *LambdaGoSwaggerTestAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *LambdaGoSwaggerTestAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *LambdaGoSwaggerTestAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *LambdaGoSwaggerTestAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *LambdaGoSwaggerTestAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the LambdaGoSwaggerTestAPIAPI
func (o *LambdaGoSwaggerTestAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OpenGetAPIIdentifierHandler == nil {
		unregistered = append(unregistered, "open.GetAPIIdentifierHandler")
	}
	if o.OpenGetBodyParamComplexResponseHandler == nil {
		unregistered = append(unregistered, "open.GetBodyParamComplexResponseHandler")
	}
	if o.OpenGetBodyParamEmptyResponseHandler == nil {
		unregistered = append(unregistered, "open.GetBodyParamEmptyResponseHandler")
	}
	if o.OpenGetBodyParamErrorResponseHandler == nil {
		unregistered = append(unregistered, "open.GetBodyParamErrorResponseHandler")
	}
	if o.OpenGetBodyParamSimpleResponseHandler == nil {
		unregistered = append(unregistered, "open.GetBodyParamSimpleResponseHandler")
	}
	if o.OpenGetNoParamsComplexResponseHandler == nil {
		unregistered = append(unregistered, "open.GetNoParamsComplexResponseHandler")
	}
	if o.OpenGetNoParamsEmptyResponseHandler == nil {
		unregistered = append(unregistered, "open.GetNoParamsEmptyResponseHandler")
	}
	if o.OpenGetNoParamsErrorResponseHandler == nil {
		unregistered = append(unregistered, "open.GetNoParamsErrorResponseHandler")
	}
	if o.OpenGetNoParamsSimpleResponseHandler == nil {
		unregistered = append(unregistered, "open.GetNoParamsSimpleResponseHandler")
	}
	if o.OpenGetPathParamComplexResponseHandler == nil {
		unregistered = append(unregistered, "open.GetPathParamComplexResponseHandler")
	}
	if o.OpenGetPathParamEmptyResponseHandler == nil {
		unregistered = append(unregistered, "open.GetPathParamEmptyResponseHandler")
	}
	if o.OpenGetPathParamErrorResponseHandler == nil {
		unregistered = append(unregistered, "open.GetPathParamErrorResponseHandler")
	}
	if o.OpenGetPathParamSimpleResponseHandler == nil {
		unregistered = append(unregistered, "open.GetPathParamSimpleResponseHandler")
	}
	if o.OpenPostBodyParamComplexResponseHandler == nil {
		unregistered = append(unregistered, "open.PostBodyParamComplexResponseHandler")
	}
	if o.OpenPostBodyParamEmptyResponseHandler == nil {
		unregistered = append(unregistered, "open.PostBodyParamEmptyResponseHandler")
	}
	if o.OpenPostBodyParamErrorResponseHandler == nil {
		unregistered = append(unregistered, "open.PostBodyParamErrorResponseHandler")
	}
	if o.OpenPostBodyParamSimpleResponseHandler == nil {
		unregistered = append(unregistered, "open.PostBodyParamSimpleResponseHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *LambdaGoSwaggerTestAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *LambdaGoSwaggerTestAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *LambdaGoSwaggerTestAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *LambdaGoSwaggerTestAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *LambdaGoSwaggerTestAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *LambdaGoSwaggerTestAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the lambda go swagger test API API
func (o *LambdaGoSwaggerTestAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *LambdaGoSwaggerTestAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"][""] = open.NewGetAPIIdentifier(o.context, o.OpenGetAPIIdentifierHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/body-param/complex-response"] = open.NewGetBodyParamComplexResponse(o.context, o.OpenGetBodyParamComplexResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/body-param/empty-response"] = open.NewGetBodyParamEmptyResponse(o.context, o.OpenGetBodyParamEmptyResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/body-param/error-response"] = open.NewGetBodyParamErrorResponse(o.context, o.OpenGetBodyParamErrorResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/body-param/simple-response"] = open.NewGetBodyParamSimpleResponse(o.context, o.OpenGetBodyParamSimpleResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/no-params/complex-response"] = open.NewGetNoParamsComplexResponse(o.context, o.OpenGetNoParamsComplexResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/no-params/empty-response"] = open.NewGetNoParamsEmptyResponse(o.context, o.OpenGetNoParamsEmptyResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/no-params/error-response"] = open.NewGetNoParamsErrorResponse(o.context, o.OpenGetNoParamsErrorResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/no-params/simple-response"] = open.NewGetNoParamsSimpleResponse(o.context, o.OpenGetNoParamsSimpleResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/path-param/complex-response/{param}"] = open.NewGetPathParamComplexResponse(o.context, o.OpenGetPathParamComplexResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/path-param/empty-response/{param}"] = open.NewGetPathParamEmptyResponse(o.context, o.OpenGetPathParamEmptyResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/path-param/error-response/{param}"] = open.NewGetPathParamErrorResponse(o.context, o.OpenGetPathParamErrorResponseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/path-param/simple-response/{param}"] = open.NewGetPathParamSimpleResponse(o.context, o.OpenGetPathParamSimpleResponseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/body-param/complex-response"] = open.NewPostBodyParamComplexResponse(o.context, o.OpenPostBodyParamComplexResponseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/body-param/empty-response"] = open.NewPostBodyParamEmptyResponse(o.context, o.OpenPostBodyParamEmptyResponseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/body-param/error-response"] = open.NewPostBodyParamErrorResponse(o.context, o.OpenPostBodyParamErrorResponseHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/body-param/simple-response"] = open.NewPostBodyParamSimpleResponse(o.context, o.OpenPostBodyParamSimpleResponseHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *LambdaGoSwaggerTestAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *LambdaGoSwaggerTestAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *LambdaGoSwaggerTestAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *LambdaGoSwaggerTestAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *LambdaGoSwaggerTestAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
