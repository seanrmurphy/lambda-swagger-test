// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTestWithParameterEndpointHandlerFunc turns a function with the right signature into a get test with parameter endpoint handler
type GetTestWithParameterEndpointHandlerFunc func(GetTestWithParameterEndpointParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTestWithParameterEndpointHandlerFunc) Handle(params GetTestWithParameterEndpointParams) middleware.Responder {
	return fn(params)
}

// GetTestWithParameterEndpointHandler interface for that can handle valid get test with parameter endpoint params
type GetTestWithParameterEndpointHandler interface {
	Handle(GetTestWithParameterEndpointParams) middleware.Responder
}

// NewGetTestWithParameterEndpoint creates a new http.Handler for the get test with parameter endpoint operation
func NewGetTestWithParameterEndpoint(ctx *middleware.Context, handler GetTestWithParameterEndpointHandler) *GetTestWithParameterEndpoint {
	return &GetTestWithParameterEndpoint{Context: ctx, Handler: handler}
}

/*GetTestWithParameterEndpoint swagger:route GET /test/with-param/{param} open getTestWithParameterEndpoint

Gets test endpoint

An alternative endpoint for testing

*/
type GetTestWithParameterEndpoint struct {
	Context *middleware.Context
	Handler GetTestWithParameterEndpointHandler
}

func (o *GetTestWithParameterEndpoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTestWithParameterEndpointParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
