// Code generated by go-swagger; DO NOT EDIT.

package open

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetNoParamsComplexResponseHandlerFunc turns a function with the right signature into a get no params complex response handler
type GetNoParamsComplexResponseHandlerFunc func(GetNoParamsComplexResponseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNoParamsComplexResponseHandlerFunc) Handle(params GetNoParamsComplexResponseParams) middleware.Responder {
	return fn(params)
}

// GetNoParamsComplexResponseHandler interface for that can handle valid get no params complex response params
type GetNoParamsComplexResponseHandler interface {
	Handle(GetNoParamsComplexResponseParams) middleware.Responder
}

// NewGetNoParamsComplexResponse creates a new http.Handler for the get no params complex response operation
func NewGetNoParamsComplexResponse(ctx *middleware.Context, handler GetNoParamsComplexResponseHandler) *GetNoParamsComplexResponse {
	return &GetNoParamsComplexResponse{Context: ctx, Handler: handler}
}

/*GetNoParamsComplexResponse swagger:route GET /no-params/complex-response open getNoParamsComplexResponse

An endpoint which returns a HTTP response code and a complex JSON object in a body

An endpoint which returns a HTTP response code and a complex JSON object in a body

*/
type GetNoParamsComplexResponse struct {
	Context *middleware.Context
	Handler GetNoParamsComplexResponseHandler
}

func (o *GetNoParamsComplexResponse) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetNoParamsComplexResponseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
